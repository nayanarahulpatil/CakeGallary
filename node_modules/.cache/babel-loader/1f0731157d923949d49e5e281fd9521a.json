{"ast":null,"code":"import { all, takeEvery, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { cart_axios } from \"../index\";\n\nfunction* CartGenerator() {\n  // first make and async task  and based on result dispatch necessary action\n  var success = true;\n  yield put({\n    type: \"CART_FETCHING\"\n  });\n  var response = yield cart_axios({\n    method: \"post\",\n    url: \"https://apifromashu.herokuapp.com/api/cakecart\",\n    data: {}\n  });\n\n  if (response.data.data) {\n    yield put({\n      type: \"CART_FTECHED\",\n      payload: response.data.data\n    });\n    console.log(\"data  from cart items \", response);\n  } else {\n    yield put({\n      type: \"CART_FAILURE\"\n    });\n  }\n}\n\n_c = CartGenerator;\n\nfunction* Cartoperation(action) {\n  // first make and async task  and based on result dispatch necessary action\n  const cakeiddata = yield call(Cartoperationadd, action.payload.cakeid);\n  yield put({\n    type: \"CART_ADD\",\n    payload: cakeiddata\n  });\n}\n\n_c2 = Cartoperation;\n\nconst Cartoperationadd = cakeid11 => {\n  console.log(\"<<<<>>>cake\", cakeid11);\n  return cart_axios({\n    method: \"post\",\n    url: \"https://apifromashu.herokuapp.com/api/addcaketocart\",\n    data: {\n      cakeid\n    }\n  });\n};\n\n_c3 = Cartoperationadd;\n\nfunction* CartSaga() {\n  yield takeEvery('Cart_Items', CartGenerator);\n}\n\n_c4 = CartSaga;\n\nfunction* CartoperationSaga() {\n  yield takeEvery('Cart_Opration', Cartoperation);\n}\n\n_c5 = CartoperationSaga;\nexport default function* RootSaga() {\n  yield all([CartSaga(), CartoperationSaga()]);\n}\n_c6 = RootSaga;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"CartGenerator\");\n$RefreshReg$(_c2, \"Cartoperation\");\n$RefreshReg$(_c3, \"Cartoperationadd\");\n$RefreshReg$(_c4, \"CartSaga\");\n$RefreshReg$(_c5, \"CartoperationSaga\");\n$RefreshReg$(_c6, \"RootSaga\");","map":{"version":3,"sources":["D:/cakegallary/src/reduxstore/saga.js"],"names":["all","takeEvery","put","call","axios","cart_axios","CartGenerator","success","type","response","method","url","data","payload","console","log","Cartoperation","action","cakeiddata","Cartoperationadd","cakeid","cakeid11","CartSaga","CartoperationSaga","RootSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAcC,SAAd,EAA0BC,GAA1B,EAA8BC,IAA9B,QAAyC,oBAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,QAAyB,UAAzB;;AAEA,UAAUC,aAAV,GAAyB;AACvB;AACF,MAAIC,OAAO,GAAG,IAAd;AACE,QAAML,GAAG,CAAC;AACNM,IAAAA,IAAI,EAAC;AADC,GAAD,CAAT;AAIA,MAAIC,QAAQ,GAAI,MAAMJ,UAAU,CAAC;AAACK,IAAAA,MAAM,EAAC,MAAR;AAChCC,IAAAA,GAAG,EAAC,gDAD4B;AAEhCC,IAAAA,IAAI,EAAC;AAF2B,GAAD,CAAhC;;AAMA,MAAGH,QAAQ,CAACG,IAAT,CAAcA,IAAjB,EAAsB;AAClB,UAAMV,GAAG,CAAC;AACNM,MAAAA,IAAI,EAAC,cADC;AAENK,MAAAA,OAAO,EAACJ,QAAQ,CAACG,IAAT,CAAcA;AAFhB,KAAD,CAAT;AAIAE,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAuCN,QAAvC;AACH,GAND,MAMK;AACH,UAAMP,GAAG,CAAC;AACNM,MAAAA,IAAI,EAAC;AADC,KAAD,CAAT;AAGD;AACF;;KAxBSF,a;;AA0BV,UAAUU,aAAV,CAAwBC,MAAxB,EAA+B;AAC3B;AACA,QAAMC,UAAU,GAAG,MAAMf,IAAI,CAACgB,gBAAD,EAAmBF,MAAM,CAACJ,OAAP,CAAeO,MAAlC,CAA7B;AACA,QAAMlB,GAAG,CAAC;AACRM,IAAAA,IAAI,EAAC,UADG;AAERK,IAAAA,OAAO,EAACK;AAFA,GAAD,CAAT;AAMD;;MATOF,a;;AAUR,MAAMG,gBAAgB,GAAIE,QAAD,IAAY;AACnCP,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BM,QAA1B;AACA,SAAQhB,UAAU,CAChB;AAACK,IAAAA,MAAM,EAAC,MAAR;AACHC,IAAAA,GAAG,EAAC,qDADD;AAEHC,IAAAA,IAAI,EAAC;AAACQ,MAAAA;AAAD;AAFF,GADgB,CAAlB;AAKH,CAPC;;MAAMD,gB;;AAWR,UAAUG,QAAV,GAAoB;AAClB,QAAMrB,SAAS,CAAC,YAAD,EAAgBK,aAAhB,CAAf;AACD;;MAFSgB,Q;;AAGV,UAAUC,iBAAV,GAA6B;AACzB,QAAMtB,SAAS,CAAC,eAAD,EAAmBe,aAAnB,CAAf;AACD;;MAFOO,iB;AAIV,eAAe,UAAUC,QAAV,GAAoB;AAElC,QAAMxB,GAAG,CAAC,CAACsB,QAAQ,EAAT,EAAYC,iBAAiB,EAA7B,CAAD,CAAT;AACA;MAHwBC,Q","sourcesContent":["import {all , takeEvery , put,call} from \"redux-saga/effects\"\r\nimport axios from \"axios\"\r\nimport {cart_axios} from \"../index\"\r\n\r\nfunction *CartGenerator(){\r\n  // first make and async task  and based on result dispatch necessary action\r\nvar success = true\r\n  yield put({\r\n      type:\"CART_FETCHING\"\r\n  })\r\n\r\n  var response  = yield cart_axios({method:\"post\",\r\n   url:\"https://apifromashu.herokuapp.com/api/cakecart\",\r\n   data:{}\r\n  }\r\n  )\r\n\r\n  if(response.data.data){\r\n      yield put({\r\n          type:\"CART_FTECHED\",\r\n          payload:response.data.data\r\n      })\r\n      console.log(\"data  from cart items \" , response)\r\n  }else{\r\n    yield put({\r\n        type:\"CART_FAILURE\"\r\n    })\r\n  }\r\n}\r\n\r\nfunction *Cartoperation(action){\r\n    // first make and async task  and based on result dispatch necessary action\r\n    const cakeiddata = yield call(Cartoperationadd, action.payload.cakeid);\r\n    yield put({\r\n      type:\"CART_ADD\",\r\n      payload:cakeiddata\r\n  })\r\n \r\n   \r\n  }\r\n  const Cartoperationadd  =(cakeid11)=>{\r\n    console.log(\"<<<<>>>cake\",cakeid11)\r\n    return  cart_axios(\r\n      {method:\"post\",\r\n   url:\"https://apifromashu.herokuapp.com/api/addcaketocart\",\r\n   data:{cakeid}})\r\n\r\n}\r\n\r\n\r\n\r\nfunction *CartSaga(){\r\n  yield takeEvery('Cart_Items' , CartGenerator)\r\n}\r\nfunction *CartoperationSaga(){\r\n    yield takeEvery('Cart_Opration' , Cartoperation)\r\n  }\r\n\r\nexport default function *RootSaga(){\r\n\r\n yield all([CartSaga(),CartoperationSaga()])\r\n}"]},"metadata":{},"sourceType":"module"}